#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass amsart
\use_default_options true
\master ../main.lyx
\begin_removed_modules
theorems-ams
\end_removed_modules
\begin_modules
eqs-within-sections
figs-within-sections
tabs-within-sections
theorems-ams-chap-bytype
theorems-ams-extended-chap-bytype
algorithm2e
customHeadersFooters
enumitem
logicalmkup
todonotes
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "Libertinus Serif"
\font_sans "default" "Avenir LT Std"
\font_typewriter "default" "Source Code Pro"
\font_math "auto" "default"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 93
\use_microtype true
\use_dash_ligatures true
\graphics default
\default_output_format pdf5
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "linkcolor=black,  frenchlinks=true, citecolor=black, urlcolor=blue, filecolor=blue, pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine biblatex
\cite_engine_type numerical
\biblio_options entryhead=true, entrykey=false
\biblatex_bibstyle reading
\biblatex_citestyle alphabetic-verb
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 0.75in
\topmargin 0.75in
\rightmargin 0.75in
\bottommargin 1in
\headsep 0.3in
\footskip 0.3in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side right
\quotes_style danish
\dynamic_quotes 1
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\listings_params "basicstyle={\ttfamily\normalsize},commentstyle={\sffamily},columns=fullflexible,numbers=left,numberstyle={\ttfamily\scriptsize},stepnumber=1,numberblanklines=false,firstline=1,numbersep=9pt,frame=tlb,framexleftmargin=3pt,framextopmargin=2pt,framexbottommargin=1pt,aboveskip={\medskipamount},belowskip={\medskipamount},captionpos=b,floatplacement=tbp,tabsize=4,resetmargins=false,breaklines=true,breakatwhitespace=false,breakautoindent=true,breakindent=0pt,prebreak={...},postbreak={...},extendedchars=true"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
General Notices
\end_layout

\begin_layout Subsection
Source of Information
\end_layout

\begin_layout Standard
Despite its ubiquitousness, the term 
\begin_inset Quotes xld
\end_inset

Tetris
\begin_inset Quotes xrd
\end_inset

 alone by no means offers a stringent set of definitions for implementation
 and execution of the game.
 Indeed, from the moment of its original conception in the 1980s by its
 inventor A.
 Pajitnov
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
In Russian: Алексе́й Па́житнов
\end_layout

\end_inset

, the Tetris-game has since evolved into a myriad of variations across over
 60 platforms.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Some-established-implementations"
plural "false"
caps "false"
noprefix "false"

\end_inset

 displays several historic implementations of the Tetris game.
\end_layout

\begin_layout Standard
The fact that every game release implements a separate set of derivative
 components from the visual effects to the specific rules not only leads
 to diversity of the game, but also difficulty of standardization at the
 same time, complicating the analysis of the underlying Tetris-game itself.
 
\end_layout

\begin_layout Standard
In light of this, the publicly maintained 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Tetris.wiki
\end_layout

\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "tetris-wiki"
literal "false"

\end_inset

 serves as a centralized collection of information on the Tetris-game, with
 the landmark article 
\begin_inset Quotes xld
\end_inset

Tetris-Guideline
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://tetris.wiki/Tetris_Guideline"
literal "false"

\end_inset


\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

 documenting the official set of recommended implementation for common component
s of a Tetris implementation, ranging from the size of the field (cf.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Cross-Ref
\end_layout

\end_inset

)to the algorithm of the generator (cf.
 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Cross-Ref
\end_layout

\end_inset

).
 This page, from now on referred to as 
\begin_inset Quotes xld
\end_inset

The Guideline
\begin_inset Quotes xrd
\end_inset

, shall serve as the main reference for the 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

-project, as well as this thesis.
 The Guideline is also quoted by established solution 
\begin_inset CommandInset citation
LatexCommand cite
key "tetris-best-ai"
literal "false"

\end_inset

.
\end_layout

\begin_layout Note
Citations from 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Tetris.wiki
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Due to its vast topic coverage, citations therefrom are inserted as foot-note
 to the referenced sub-page instead of the more traditional style of within-text
 display.
 The reader shall note that the Creative Commons 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
CC BY-NC-SA 3.0
\end_layout

\end_inset

 license is deployed site-wide, which in particular applies to the illustrations
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Some-established-implementations"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename /mnt/x/Dox/amperstand/eth/tss/bsc/shetris/tss/bin/tetris/field/nes.gif
	height 4cm

\end_inset


\begin_inset Formula $\qquad$
\end_inset


\begin_inset Graphics
	filename /mnt/x/Dox/amperstand/eth/tss/bsc/shetris/tss/bin/tetris/field/tgm.gif
	height 4cm

\end_inset


\begin_inset Formula $\qquad$
\end_inset


\begin_inset Graphics
	filename /mnt/x/Dox/amperstand/eth/tss/bsc/shetris/tss/bin/tetris/field/gameboy.png
	height 4cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Some-established-implementations"

\end_inset

Several established implementations of the Tetris-game.
 From left to right:
\begin_inset Newline newline
\end_inset


\begin_inset CommandInset href
LatexCommand href
name "Tetris for NES, Nintendo"
target "https://tetris.wiki/Tetris_(NES,_Nintendo)"
literal "false"

\end_inset

 (1989); 
\begin_inset CommandInset href
LatexCommand href
name "Tetris The Grand Master"
target "https://tetris.wiki/Tetris_The_Grand_Master"
literal "false"

\end_inset

 (1998); 
\begin_inset CommandInset href
LatexCommand href
name "Tetris for Game Boy"
target "https://tetris.wiki/Tetris_(Game_Boy)"
literal "false"

\end_inset

 (1989)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Recapitulation of the game
\end_layout

\begin_layout Standard
The general concept of the Tetris-game hardly requires introduction.
 This curt folk-lore more or less captures the general public's impression:
\begin_inset VSpace 100baselineskip%
\end_inset


\end_layout

\begin_layout Quote
\noindent
\align center
At the very beginning, a board of empty boxes emerges.
\end_layout

\begin_layout Quote
\noindent
\align center
Then pieces begin falling, and one rotates and moves them, one at a time.
\end_layout

\begin_layout Quote
\noindent
\align center
If luck or skill shall so allow, some rows become complete, when the bottom
 is reached;
\begin_inset Newline newline
\end_inset

and thus these rows are cleared, the height reduced and a new piece provided.
\end_layout

\begin_layout Quote
\noindent
\align center
Finally, the top of field no longer contains the fresh piece, and the game
 duly calls quit;
\begin_inset Newline newline
\end_inset

unless the insatiated soul resets everything, just to start again.
\end_layout

\begin_layout Standard
\begin_inset VSpace 100baselineskip%
\end_inset


\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
Transferred Philosophy
\end_layout

\begin_layout Standard
While intuitively explanatory, further details are required for a stringent
 formulation of the game.
 In particular, there exist several frequent 
\begin_inset Quotes xld
\end_inset

moving-parts
\begin_inset Quotes xrd
\end_inset

 of the Tetris-game that must be clearly defined.
 Concerning those starkly varying components, the philosophy of 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

 is summarized as follows:
\end_layout

\begin_layout Description
standard-compliant deploy suggestions of The Guideline as the default whenever
 possible;
\end_layout

\begin_layout Description
user-configurable provide configuration possibilities to adapt to other
 existing implementations;
\end_layout

\begin_layout Description
future-extendable offer maximal API-extendability for future work beyond
 any existing implementation variants.
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Note that the compliance to the The Guideline (or any standardized recommendatio
n) is a delicate matter.
 In fact, as shall be demonstrated later, deviations from The Guideline
 sometimes produce unexpected, yet helpful results, and might even provide
 insights from unique angles 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Cross-Ref
\end_layout

\end_inset

 otherwise inaccessible.
 The reader shall thus pay attention to statements regarding adherence to
 the official standard whenever explicit statements are made in this thesis.
\end_layout

\begin_layout Section
Essential Implementations
\end_layout

\begin_layout Standard
The knowledge of the diversity of the 
\begin_inset Quotes xld
\end_inset

Tetris
\begin_inset Quotes xrd
\end_inset

 game decisively influenced the implementation of Shetris.
 This section provides several notes on the specific rules chosen by Shetris.
 Tetris-game necessary to commence the discussion on the implementation
 are introduced below.
\end_layout

\begin_layout Standard
For every such component, the definition and recommendation from The Guideline
 is first provided, followed by notes on implementation details in 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
First touch with a piece
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Implementation ! piece
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
The identity of a piece
\begin_inset Index idx
status collapsed

\begin_layout Plain Layout
Implementation ! piece ! 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The vertically falling shapes of four squares of the Tetris-game are instantly
 recognizable.
 Formally, they are defined as follows:
\end_layout

\begin_layout Definition
The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

: the identity of a piece
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Piece by Tetris.wiki: 
\begin_inset CommandInset href
LatexCommand href
target "https://tetris.wiki/Piece"
literal "false"

\end_inset


\end_layout

\end_inset

 
\begin_inset CommandInset label
LatexCommand label
name "def:The-identity-of-a-piece"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
A 
\begin_inset Quotes xld
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
piece
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

 is defined as a collection of 
\begin_inset Quotes xld
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
blocks
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

.
 Commonly referred to as 
\begin_inset Quotes xld
\end_inset

Tetromino
\begin_inset Quotes xrd
\end_inset

 and 
\begin_inset Quotes xld
\end_inset

Tetrimino
\begin_inset Quotes xrd
\end_inset

, seven of which are stipulated by the official guideline:
\begin_inset Formula 
\[
\begin{bmatrix}\blacksquare & \blacksquare\\
\blacksquare & \blacksquare
\end{bmatrix}\quad\begin{bmatrix}\blacksquare & \blacksquare & \blacksquare & \blacksquare\end{bmatrix}\quad\begin{bmatrix} & \blacksquare & \blacksquare\\
\blacksquare & \blacksquare
\end{bmatrix}\quad\begin{bmatrix}\blacksquare & \blacksquare\\
 & \blacksquare & \blacksquare
\end{bmatrix}\quad\begin{bmatrix} &  & \blacksquare\\
\blacksquare & \blacksquare & \blacksquare
\end{bmatrix}\quad\begin{bmatrix}\blacksquare\\
\blacksquare & \blacksquare & \blacksquare
\end{bmatrix}\quad\begin{bmatrix} & \blacksquare\\
\blacksquare & \blacksquare & \blacksquare
\end{bmatrix}
\]

\end_inset


\end_layout

\begin_layout Standard
In 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

, they are internally identified with the variable 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

 of values from 
\begin_inset Formula $0$
\end_inset

 to 
\begin_inset Formula $6$
\end_inset

 in the exact order from left to right as shown above.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Remark
Beyond the four blocks
\end_layout

\begin_deeper
\begin_layout Standard
The term 
\begin_inset Quotes xld
\end_inset

piece
\begin_inset Quotes xrd
\end_inset

 is preferred over 
\begin_inset Quotes xld
\end_inset

Tetrimino
\begin_inset Quotes xrd
\end_inset

 or 
\begin_inset Quotes xld
\end_inset

Tetromino
\begin_inset Quotes xrd
\end_inset

 for generality potential to shapes beyond the aforementioned 
\begin_inset Formula $4$
\end_inset

-box limitation.
 Indeed, researches such as 
\begin_inset CommandInset citation
LatexCommand cite
key "demaine-n-mino"
literal "false"

\end_inset

 have studied exotic variations such as Trominoes (
\begin_inset Formula $3$
\end_inset

 blocks per piece) and Pentominoes (
\begin_inset Formula $5$
\end_inset

-blocks per piece); and 
\begin_inset CommandInset citation
LatexCommand cite
key "tetris-rl-survey,reduced-tetris"
literal "false"

\end_inset

 demonstrate reinforcement-learning applied to the Tetris-game with other
 styles of modified pieces.
\end_layout

\begin_layout Standard
Though 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

 currently includes only the 
\begin_inset Formula $7$
\end_inset

 official 
\begin_inset Formula $4$
\end_inset

-block pieces as mentioned in Definition 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:The-identity-of-a-piece"
plural "false"
caps "false"
noprefix "false"

\end_inset

, extension to other constellations of pieces with arbitrary number of blocks
 is easily realizable under conformity to the API as described in later
 sections.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Cross-Ref
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsubsection
The rotation and SRS
\end_layout

\begin_layout Standard
Given the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

 of the range 
\begin_inset Formula $\in\left\{ 0,1,\cdots6\right\} $
\end_inset

, the specific type of the piece is uniquely identified.
 However, the possibility of rotation might still lead to variations of
 the shape with no modification to the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

.
 Though seemingly straight-forward, the execution of this movement has seen
 numerous implementation variations.
 Instead of delving into the details of the differences among these, the
 author presents the rotational mechanism of Shetris as the Super-Rotation-Syste
m as enforced by the Tetris-Guideline and refers the interested reader to
 the summary page of Tetris-Wiki
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://tetris.wiki/Category:Rotation_systems"
literal "false"

\end_inset


\end_layout

\end_inset

 for in-depth investigation of other variants.
\end_layout

\begin_layout Definition
Essential components of Super-Rotational-System (SRS)
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://tetris.wiki/Super_Rotation_System"
literal "false"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
By no ways a summary of its features, the following list enumerates essential
 components of SRS:
\end_layout

\begin_layout Itemize
Every piece can be rotated in the counter-clockwise and the clockwise sense;
\end_layout

\begin_layout Itemize
Every 
\begin_inset Formula $4$
\end_inset

 rotational inputs in the same direction yields the original position;
\end_layout

\begin_layout Itemize
Every piece has one default rotational state.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Note
Implementation of SRS of 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Implementation ! piece ! SRS
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In Shetris, the rotational configuration 
\begin_inset Formula $r$
\end_inset

 or 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rot
\end_layout

\end_inset

 of a piece is simply an integer value:
\begin_inset Formula 
\[
\left\{ \begin{alignedat}{1}r & \in\left\{ 0,1,2,3\right\} \\
\texttt{rot} & \in\texttt{range(4)}
\end{alignedat}
\right.
\]

\end_inset

with 
\begin_inset Formula $0$
\end_inset

 denoting the default rotational state.
 Conforming to conventions in mathematics, every counter-clockwise rotation
 increments this value by 
\begin_inset Formula $+1$
\end_inset

, while every clockwise rotation translates to a decrement of 
\begin_inset Formula $-1$
\end_inset

.
 The modulus-nature of the rotational state is illustrated as follows:
\begin_inset Formula 
\[
\xymatrix{ & *++[F-]{r=1}\ar@<-1pc>@/_{1pc}/[dl]_{{\leftturn}}\\
*++[F-]{r=2}\ar@<-1pc>@/_{1pc}/[dr]_{{\leftturn}} &  & *++[F-]{r=0}\ar@<-1pc>@/_{1pc}/[ul]_{{\leftturn}}\\
 & *++[F-]{r=3}\ar@<-1pc>@/_{1pc}/[ur]_{{\leftturn}}
}
\qquad\qquad\xymatrix{ & *++[F-]{r=1}\ar@<+1pc>@/^{1pc}/[dr]^{{\rightturn}}\\
*++[F-]{r=2}\ar@<+1pc>@/^{1pc}/[ur]^{{\rightturn}} &  & *++[F-]{r=0}\ar@<+1pc>@/^{1pc}/[dl]^{{\rightturn}}\\
 & *++[F-]{r=3}\ar@<+1pc>@/^{1pc}/[ul]^{{\rightturn}}
}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
In the following, the full specification of every rotational configuration
 of all 
\begin_inset Formula $7$
\end_inset

 pieces is enumerated:
\end_layout

\begin_layout Definition
Rotation of all pieces
\begin_inset CommandInset label
LatexCommand label
name "def:Rotation-of-all-pieces"

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Implementation ! piece ! all rotations
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The O-piece has the same piece-shape for any of the rotational values 
\begin_inset Formula $r\in\left\{ 0,1,2,3\right\} $
\end_inset

:
\begin_inset Formula 
\[
\begin{bmatrix}\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}
\]

\end_inset


\end_layout

\begin_layout Standard
Assuming no positional shifts in the vertical or the horizontal direction,
 all other pieces, every rotational value corresponds to one distinct configurat
ion of the piece.
 Their respective configurations at 
\begin_inset Formula $r=0$
\end_inset

 to 
\begin_inset Formula $4$
\end_inset

 are enlisted below:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{alignedat}{4} & \overbrace{\begin{bmatrix}\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \blacksquare & \blacksquare\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}}^{r=0} & \stackrel[\rightturn]{\leftturn}{\rightleftharpoons} & \overbrace{\underbrace{\begin{bmatrix}\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon
\end{bmatrix}}_{\texttt{"I"}}}^{r=1} & \stackrel[\rightturn]{\leftturn}{\rightleftharpoons} & \overbrace{\begin{bmatrix}\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \blacksquare & \blacksquare\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}}^{r=2} & \stackrel[\rightturn]{\leftturn}{\rightleftharpoons} & \overbrace{\begin{bmatrix}\fullmoon & \fullmoon & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \blacksquare & \fullmoon
\end{bmatrix}}^{r=3}\\
 & \underbrace{\begin{bmatrix}\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\blacksquare & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}}_{\texttt{"S"}} &  & \begin{bmatrix}\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \begin{bmatrix}\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\blacksquare & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \begin{bmatrix}\blacksquare & \fullmoon & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}\\
 & \underbrace{\begin{bmatrix}\blacksquare & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}}_{\texttt{"Z"}} &  & \begin{bmatrix}\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \fullmoon & \fullmoon\\
\blacksquare & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \begin{bmatrix}\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \begin{bmatrix}\fullmoon & \fullmoon & \blacksquare & \fullmoon\\
\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}\\
 & \begin{bmatrix}\fullmoon & \fullmoon & \blacksquare & \fullmoon\\
\blacksquare & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \begin{bmatrix}\blacksquare & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \begin{bmatrix}\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \blacksquare & \fullmoon\\
\blacksquare & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \underbrace{\begin{bmatrix}\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}}_{\texttt{"L"}}\\
 & \begin{bmatrix}\blacksquare & \fullmoon & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \underbrace{\begin{bmatrix}\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}}_{\texttt{"J"}} &  & \begin{bmatrix}\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \begin{bmatrix}\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}\\
 & \begin{bmatrix}\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \begin{bmatrix}\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix} &  & \underbrace{\begin{bmatrix}\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\blacksquare & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}}_{\texttt{"T"}} &  & \begin{bmatrix}\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \blacksquare & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}
\end{alignedat}
\]

\end_inset


\end_layout

\begin_layout Standard
Note that this is by no means a misconception: the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
\begin_inset Quotes qld
\end_inset

I
\begin_inset Quotes qrd
\end_inset


\end_layout

\end_inset

-piece, for example, registers different configuration in the two horizontally
 
\begin_inset Formula $\left(r\in\left\{ 0,2\right\} \right)$
\end_inset

 and vertically 
\begin_inset Formula $\left(r\in\left\{ 1,3\right\} \right)$
\end_inset

 
\begin_inset Quotes xld
\end_inset

flat
\begin_inset Quotes xrd
\end_inset

 placements.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
Indexing and Coordinates
\end_layout

\begin_layout Standard
As soon as the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

 and its 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rot
\end_layout

\end_inset

 
\begin_inset Formula $r$
\end_inset

 is known, the 
\begin_inset Quotes xld
\end_inset

shape
\begin_inset Quotes xrd
\end_inset

 of the current piece is uniquely identified.
 The final step involves the vertical and horizontal positioning.
 To this end, the notion of the 
\begin_inset Quotes xld
\end_inset

board
\begin_inset Quotes xrd
\end_inset

, where every piece is actually placed, must first be formalized:
\end_layout

\begin_layout Subsubsection
The field
\end_layout

\begin_layout Definition
The field
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://tetris.wiki/Playfield"
literal "false"

\end_inset


\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Implementation ! field
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The previously mentioned 
\begin_inset Quotes xld
\end_inset

board
\begin_inset Quotes xrd
\end_inset

 is officially termed the 
\begin_inset Quotes xld
\end_inset


\begin_inset Flex Emph
status open

\begin_layout Plain Layout
field
\end_layout

\end_inset


\begin_inset Quotes xrd
\end_inset

, a two-dimensional, rectangular collection of 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
blocks
\end_layout

\end_inset

, the same constituent of every 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
piece
\end_layout

\end_inset

 as seen in Definition 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:The-identity-of-a-piece"
plural "false"
caps "false"
noprefix "false"

\end_inset

.
\end_layout

\begin_layout Standard
The Guideline stipulates the size of 
\begin_inset Formula $20\times10$
\end_inset

, i.e., the field shall encompass 
\begin_inset Formula $20$
\end_inset

 rows and 
\begin_inset Formula $10$
\end_inset

 columns of 
\begin_inset Quotes xld
\end_inset

blocks
\begin_inset Quotes xrd
\end_inset

.
\end_layout

\begin_layout Standard
At any time, each block is deterministically in one of the binary-state:
 occupied or unoccupied.
 Modeling the two states as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
True
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
False
\end_layout

\end_inset

 respectively, the field could readily be viewed as a (two-dimensional)
 matrix of boolean values:
\begin_inset Formula 
\[
\text{field}\in\left\{ 0,1\right\} ^{\text{\#rows}\times\text{\#columnss}}\equiv\texttt{bool}^{\text{\#rows}\times\text{\#columnss}}
\]

\end_inset

which translates to 
\begin_inset Formula $\text{field}\in\texttt{bool}^{20\times10}$
\end_inset

 for the standard field.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Note
Implementation in 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

, the field is represented by a two-dimensional field array of boolean entries
 of the matrix-type 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ndarray
\end_layout

\end_inset

 by the (standard) array-library 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy
\end_layout

\end_inset

.
 Referred to as 
\begin_inset Quotes xld
\end_inset

field-array
\begin_inset Quotes xrd
\end_inset

, this along with the size for ease of access, is abstracted in the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Field
\end_layout

\end_inset

 class as seen in 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:Constructor-for-Field"
plural "false"
caps "false"
noprefix "false"

\end_inset


\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

class Field:
\end_layout

\begin_layout Plain Layout

    def __init__(self, field: np.ndarray):
\end_layout

\begin_layout Plain Layout

        self._field = field
\end_layout

\begin_layout Plain Layout

        self._size = field.shape
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Constructor-for-Field"

\end_inset

Constructor for 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Field
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A brief enumeration of common operations of the field, for example, finding
 full rows and performing line-clears, is found later 
\begin_inset Note Note
status open

\begin_layout Plain Layout
Add reference
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Remark
Comparison with existing implementations
\end_layout

\begin_deeper
\begin_layout Standard
The reader shall note the argument of the constructor above: instead of
 accepting the size of the array to construct the field, as seen in 
\begin_inset CommandInset citation
LatexCommand cite
key "uvipen,tetris-nuno,tetris-best-ai"
literal "false"

\end_inset

, the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Field
\end_layout

\end_inset

-class instead admits an object of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ndarray
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
This design creates an extra layer of separation: the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Field
\end_layout

\end_inset

-class is thus agnostic to the size of the underlying array, as well as
 its state at the time of creation, enabling initialization with arbitrary
 size and occupation status with external 
\begin_inset Quotes xld
\end_inset

factory
\begin_inset Quotes xrd
\end_inset

-style functions.
 In 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

, The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
FieldFactory
\end_layout

\end_inset

 class of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
util/fieldfac.py
\end_layout

\end_inset

 provides such methods.
 In particular, it offers utility to read the array from any external file,
 allowing initialization tailored to specific testing or debugging scenarios.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
Common operations of the field
\end_layout

\begin_deeper
\begin_layout Standard
of the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Field
\end_layout

\end_inset

 class include calculating full-rows, clearing and shifting rows, and ultimately
, performing the line-clear operation.
 Naturally, these are all member functions of the field.
 The interested reader is referred to the source-code for implementations
 of such key members.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python"
inline false
status open

\begin_layout Plain Layout

class Field:
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:Some-examplary-operations"

\end_inset

Some examplary operations of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Field
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsubsection
Indexing
\end_layout

\begin_layout Standard
A byproduct of choosing the underlying type of the field-array as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ndarray
\end_layout

\end_inset

 is the indexing convention of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy
\end_layout

\end_inset

, dictating the axes and their directions to specify the coordinates of
 the blocks of the field.
 This convention, as used throughout 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

, is understood as follows:
\end_layout

\begin_layout Definition
Indexing convention of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy
\end_layout

\end_inset

 and 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\begin_inset Index idx
status open

\begin_layout Plain Layout
Implementation ! indexing
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
Following the indexing convention of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy
\end_layout

\end_inset

 (and various other numerical libraries), one observes:
\end_layout

\begin_layout Itemize
the positive direction of the first axis proceeds downwards vertically
\end_layout

\begin_layout Itemize
and that of the second axis points rightwards horizontally.
 
\end_layout

\begin_layout Standard
While this requires some mental adjustments compared to the traditional,
 two-dimensional Cartesian system, the abstraction is not only necessary
 for smooth deployment of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy.ndarray
\end_layout

\end_inset

, but also guarantees that the value first axis continuously increases as
 a piece falls downwards.
\end_layout

\begin_layout Standard
At this point, the position, or 
\begin_inset Quotes xld
\end_inset

coordinate
\begin_inset Quotes xrd
\end_inset

 of every block of the field is provided as the following schematics:
\begin_inset Formula 
\[
\begin{bmatrix}\left(0,0\right) & \left(1,0\right) & \cdots & \left(9,0\right)\\
\left(1,0\right) & \left(1,1\right)\\
\vdots\\
\vdots\\
\vdots &  & \ddots\\
\left(19,0\right) &  &  & \left(19,9\right)
\end{bmatrix}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsubsection
From relative to absolute coordinates
\end_layout

\begin_layout Standard
With the notion of the coordinates of the blocks of the field as introduced
 above, it thus follows the natural extension to the coordinates of a specific
 piece.
 In preparation for this, the notion of relative-coordinates is first introduced
:
\end_layout

\begin_layout Definition
The relative-coordinates of a piece
\end_layout

\begin_deeper
\begin_layout Standard
When viewing the schematic illustration in Definition 
\begin_inset CommandInset ref
LatexCommand ref
reference "def:Rotation-of-all-pieces"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the reader might challenge the necessity of the extra padding by the unoccupie
d blocks around every piece and the thus the necessity of surrounding all
 
\begin_inset Formula $7$
\end_inset

 pieces by the 
\begin_inset Formula $4\times4$
\end_inset

 square of blocks.
\end_layout

\begin_layout Standard
The justification of this stems from the notion of relative-coordinates,
 in the sense that given a piece and some rotational configuration, the
 relative coordinates of its blocks (
\begin_inset Formula $4$
\end_inset

 of them for a Tetrimino) is constant.
\end_layout

\begin_layout Standard
By choosing the surrounding square of 
\begin_inset Formula $4\times4$
\end_inset

, one guarantees that all 
\begin_inset Formula $7$
\end_inset

 standard pieces are contained in a uniform structure.
 The reader shall also note that this is the construction of the minimal
 size: indeed, decreasing its height or width leads to incapability to fully
 surround the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
\begin_inset Quotes qld
\end_inset

I
\begin_inset Quotes qrd
\end_inset


\end_layout

\end_inset

-piece.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
its relative The key insight is that every rotational configuration of every
 piece is of the same shape in a 
\begin_inset Formula $4\times4$
\end_inset

 square-of-blocks.
\end_layout

\begin_layout Standard
In other words, given the values of the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

 and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rot
\end_layout

\end_inset

 and the position of this 
\begin_inset Formula $4\times4$
\end_inset

 square, the absolute-coordinates of a piece is immediately constructable.
 It remains thus to unify oneself on the convention of identifying the position
 of this square.
 The particular implementation in 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

 is formalized below:
\end_layout

\begin_layout Definition
Construction of absolute-coordinates in 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The block in the upper-most and left-most position is used to identify a
 
\begin_inset Formula $4\times4$
\end_inset

 square-of-blocks.
 The following illustration shows the the coordinates of all blocks contained
 in the 
\begin_inset Formula $4\times4$
\end_inset

 square relative to the reference-block (of relative coordinate
\begin_inset Formula $\left(+0,+0\right)$
\end_inset

) marked by 
\begin_inset Formula $\star$
\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\begin{bmatrix}\star & \left(+1,+0\right) & \left(+2,+0\right) & \left(+3,+0\right)\\
\left(+1,+0\right) & \left(+1,+1\right) & \cdots & \cdots\\
\left(+2,+0\right) & \vdots & \ddots\\
\left(+3,+0\right) & \vdots &  & \left(+3,+3\right)
\end{bmatrix}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Remark
Choice of the reference-block
\end_layout

\begin_deeper
\begin_layout Standard
It shall be pointed out that the reference-block can be chosen as arbitrarily:
 one might as well have chosen some block situated more towards the center,
 or even the one in the lower-right corner.
 The choice as made above is based on the indexing-condition as described
 previously: in this way, the relative-coordinates in both index-axes within
 a square-block is guaranteed to be always non-negative, and conforming
 to the standard 
\begin_inset Formula $0$
\end_inset

-indexing, spanning the 
\begin_inset Formula $4$
\end_inset

 integer-values from 
\begin_inset Formula $0$
\end_inset

 to 
\begin_inset Formula $3$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Note
Implementation in 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

, the relative-coordinates of every 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
(piece, rotation)
\end_layout

\end_inset

-pair is stored as 
\begin_inset Quotes xld
\end_inset

class-members
\begin_inset Quotes xrd
\end_inset

 of the class 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
RelCoord
\end_layout

\end_inset

, a snippet of which is shown below:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# src/engine/placement/srs/coord.py
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class RelCoord:
\end_layout

\begin_layout Plain Layout

    _rel_coords = np.array(
\end_layout

\begin_layout Plain Layout

        (
\end_layout

\begin_layout Plain Layout

            # O
\end_layout

\begin_layout Plain Layout

            (
\end_layout

\begin_layout Plain Layout

                ((+0, +1), (+1, +1), (+0, +2), (+1, +2)),
\end_layout

\begin_layout Plain Layout

				...
\end_layout

\begin_layout Plain Layout

            ),
\end_layout

\begin_layout Plain Layout

            # I
\end_layout

\begin_layout Plain Layout

            (
\end_layout

\begin_layout Plain Layout

                ((+1, +0), (+1, +1), (+1, +2), (+1, +3)),
\end_layout

\begin_layout Plain Layout

                ((+0, +1), (+1, +1), (+2, +1), (+3, +1)),
\end_layout

\begin_layout Plain Layout

                ((+2, +0), (+2, +1), (+2, +2), (+2, +3)),
\end_layout

\begin_layout Plain Layout

                ((+0, +2), (+1, +2), (+2, +2), (+3, +2)),
\end_layout

\begin_layout Plain Layout

            ),
\end_layout

\begin_layout Plain Layout

            # S
\end_layout

\begin_layout Plain Layout

            (
\end_layout

\begin_layout Plain Layout

                ((+1, +0), (+0, +1), (+1, +1), (+0, +2)),
\end_layout

\begin_layout Plain Layout

				...
\end_layout

\begin_layout Plain Layout

            ),
\end_layout

\begin_layout Plain Layout

           ...
\end_layout

\begin_layout Plain Layout

        )
\end_layout

\begin_layout Plain Layout

    )
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:relative-coordinates-data"

\end_inset

Data of relative-coordinates
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The storage order of the relative coordinates is defined as follows:
\end_layout

\begin_layout Itemize
the primary index is the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
the secondary index is the rotational configuration 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
rot
\end_layout

\end_inset


\begin_inset listings
inline false
status open

\begin_layout Plain Layout

# src/engine/placement/srs/coord.py
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class RelCoord:
\end_layout

\begin_layout Plain Layout

    _rel_coords = ...
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    @staticmethod
\end_layout

\begin_layout Plain Layout

    def get_rel_coord(pid: int, rot: int) -> np.ndarray:
\end_layout

\begin_layout Plain Layout

        return RelCoord._rel_coords[pid][rot]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "lis:get-relative-coordinates"

\end_inset

Fetching relative coordinates
\end_layout

\end_inset


\end_layout

\end_inset

The 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
static
\end_layout

\end_inset

 nature of this method and the class-wide setting of the variable 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
_rel_coords
\end_layout

\end_inset

 frees the class 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
RelCoord
\end_layout

\end_inset

 from the necessity of tracking any instance-variables: the caller only
 needs to pass in the arguments when invoking the method to find the relative-co
ordinates, without constructing instances or keeping track of internal values.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
Moving Pieces
\end_layout

\begin_deeper
\begin_layout Standard
The advantage of managing the coordinates using the piece-rotation stored
 in the format of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy
\end_layout

\end_inset

 is seen with the dynamic requirement for constructing the absolute-coordinates
 under movement inputs.
 Specifically, shifting a piece (both vertically and horizontally) is almost
 trivial: as the relative-coordinates obtained by 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:get-relative-coordinates"
plural "false"
caps "false"
noprefix "false"

\end_inset

 is of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy.ndarray
\end_layout

\end_inset

, any such moving operation translates to an addition to or a subtraction
 from the relative-coordinates.
\end_layout

\begin_layout Standard
On the other hand, inputs made to modify the rotational configuration necessitat
es a re-read from the relative-coordinates data.
 This, however, is justifiable, as changes made in rotations should be a
 lot scarcer than those in positions, which is intuitively understandable
 by considering the following example:
\end_layout

\begin_layout Standard
Consider the standard field with the height of 
\begin_inset Formula $20$
\end_inset

 blocks, a piece would have to move vertically downwards, i.e., 
\begin_inset Quotes xld
\end_inset

fall
\begin_inset Quotes xrd
\end_inset

, for around 
\begin_inset Formula $10$
\end_inset

 blocks if the field is occupied to half the vertical height, whereas the
 rotational inputs should never exceed 
\begin_inset Formula $4$
\end_inset

 considering the modulus-by-
\begin_inset Formula $4$
\end_inset

 property of rotation.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
The above relative-coordinates are implemented in the purely static, factory-sty
le 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
RelCoord
\end_layout

\end_inset

 class in 
\begin_inset CommandInset ref
LatexCommand ref
reference "lis:get-relative-coordinates"
plural "false"
caps "false"
noprefix "false"

\end_inset


\end_layout

\begin_layout Remark
Comparison to other implementations
\end_layout

\begin_deeper
\begin_layout Enumerate
Existing implementations tend to prefer storing the relative-coordinates
 in the built-in 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
list
\end_layout

\end_inset

-facility of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
python
\end_layout

\end_inset

, which necessitates manually written 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Formula 
\[
\begin{bmatrix}\times & \times\\
\times & \circ & \circ & \fullmoon\blacksquare\bigcirc\\
\times & \circ & \circ & \ocircle\ocircle\blacksquare\bigcirc\\
\times &  &  & \fullmoon\newmoon\blacksquare\varbigcirc
\end{bmatrix}\quad\begin{bmatrix}\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \blacksquare & \blacksquare & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon\\
\fullmoon & \fullmoon & \fullmoon & \fullmoon
\end{bmatrix}
\]

\end_inset


\end_layout

\begin_layout Subsection
Generator
\end_layout

\begin_layout Standard
The generator (not to be confused with the language facility of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
Python
\end_layout

\end_inset

), as previously stated, produces the pids, i.e., the piece-ids.
 The 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Tetris-Guideline
\end_layout

\end_inset

 stipulates the usage of the 
\begin_inset Quotes xld
\end_inset


\begin_inset Formula $7$
\end_inset

-bag
\begin_inset Quotes xrd
\end_inset

 generation algorithm, which is specified below:
\end_layout

\begin_layout Definition
\begin_inset Formula $7$
\end_inset

-bag generator
\end_layout

\begin_deeper
\begin_layout Standard
From the first generated 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

, every 
\begin_inset Formula $7$
\end_inset

 consecutive pieces is a (random) permutation of all the 
\begin_inset Formula $7$
\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

-values.
 
\begin_inset Formula 
\[
\overbrace{\;\texttt{perm(7)}\,}^{1^{\text{st}}\text{bag}}\quad|\quad\underbrace{\;\texttt{perm(7)\,}}_{\text{2}^{\text{nd}}\text{bag}}\quad|\quad\cdots
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Note
Implementation in 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy
\end_layout

\end_inset

's library method 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
permutation()
\end_layout

\end_inset

 is used instead of the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
random
\end_layout

\end_inset

 package of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
python
\end_layout

\end_inset

's standard library as seen in existing implementations .
 This decision is based on two arguments:
\end_layout

\begin_layout Standard
On the one hand, 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy
\end_layout

\end_inset

's latest 
\begin_inset Quotes xld
\end_inset

in-house
\begin_inset Quotes xrd
\end_inset

 random-number-generator (RNG) of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
np.random.default_rng()
\end_layout

\end_inset

 is cleanly default constructed 
\begin_inset Quotes xld
\end_inset

as is
\begin_inset Quotes xrd
\end_inset

, without any argument specification.
 The advantage of this is seen when multiple iterations of the game are
 played: instead of burdening the caller with the responsibility to provide
 a different seed after every iteration, simply creating another generator
 object composing of this facility suffices as random initialization.
\end_layout

\begin_layout Standard
On the other hand, the aforementioned 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
permutation()
\end_layout

\end_inset

 method returns a permuted sequence of type 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
numpy.ndarray
\end_layout

\end_inset

, which can be further processed naturally by the caller if more than one
 piece-id is required per call, which is by no means an exotic requirement:
 colloquially, this is known as the previewing of future pieces.
 Considering the fact that the caller is likely an observing agent as described
 in 
\begin_inset Note Note
status open

\begin_layout Plain Layout

\color greyedouttext
Add cross-ref
\end_layout

\end_inset

 and would likely require the observation to be of the format 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
ndarray
\end_layout

\end_inset

 anyway, this prevents extra type-conversions and renders the interface
 more type-coherent.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Note
Beyond the 
\begin_inset Formula $7$
\end_inset

-bag algorithm in 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The generator of 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

 reaches beyond the standard, shuffled 
\begin_inset Formula $7$
\end_inset

-bag system: in particular, the randomized bag-based algorithm accepts any
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
The movements
\end_layout

\begin_layout Standard
The engine defined above not only defines multiple essential components
 of the Tetris-game, it also critically provides the state of the system.
 Indeed, the conception of the 
\begin_inset Quotes xld
\end_inset

Engine
\begin_inset Quotes xrd
\end_inset

 provides the abstraction of the state 
\begin_inset Formula $x$
\end_inset

 of the system that is one Tetris-game.
 This thus includes:
\end_layout

\begin_layout Enumerate
the current field 
\begin_inset Formula $x_{F}$
\end_inset


\end_layout

\begin_layout Enumerate
the current piece 
\begin_inset Formula $x_{P}$
\end_inset


\end_layout

\begin_layout Enumerate
the state of the generator
\end_layout

\begin_layout Standard
Note that the state 
\begin_inset Formula $x$
\end_inset

 is most likely only partially observable: at the very least, for example,
 the reservoir of the generator is not available to the agent.
\end_layout

\begin_layout Standard
With the static state 
\begin_inset Formula $x$
\end_inset

 of the system provided, the next step is to formulate the evolution mechanism.
 The discrete nature of the Tetris-game seems apparent, but much rigor is
 still necessary to formulate the evolution.
 This section formulates such mechanisms 
\begin_inset Formula $f$
\end_inset

 that provides
\begin_inset Formula 
\[
x_{t+1}\eqqcolon f\left(x_{t},\cdots\right)
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Movements of Tetris guideline
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Plain Layout
Tetris guideline dictates multiple 
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Movements in Shetris
\end_layout

\begin_layout Standard
The partial observation
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
The following summary provides a brief overview of the essential components
 of the 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

-engine as depicted above:
\end_layout

\begin_layout Standard
\begin_inset Note Greyedout
status open

\begin_layout Enumerate
The core game-logic is abstracted in the 
\begin_inset Quotes xld
\end_inset

engine
\begin_inset Quotes xrd
\end_inset

, composed of two major constituents: the piece-generator that spawns new
 pieces, the 
\begin_inset Quotes xld
\end_inset

placement
\begin_inset Quotes xrd
\end_inset

 sub-engine that decides and the piece generator.
 As explained in later chapters, the 
\begin_inset Quotes xld
\end_inset

engine
\begin_inset Quotes xrd
\end_inset

 provides the evolution logic;
\end_layout

\begin_layout Enumerate
Multiple modes
\end_layout

\begin_layout Plain Layout
Visualization is possible either from the terminal in the traditional text-style
, or via a graphic interface.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Further notes
\end_layout

\begin_layout Standard
The above walk-through only touches upon key components of the 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

 implementation essential to upcoming presentations in this thesis.
 The interested reader is referred to the source-code library for deeper
 immersion in the unabridged listings of the source-code.
\end_layout

\begin_layout Section
Formulation of the Control-Process
\end_layout

\begin_layout Standard
With the specification of the 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

-engine, a control-process for the Tetris-game can be readily formulated.
 The discrete-in-time evolution, as defined in established literature such
 as 
\begin_inset CommandInset citation
LatexCommand cite
key "bertsekas_1995"
literal "false"

\end_inset

, is seen as follows:
\end_layout

\begin_layout Subsection
General Control-Process
\end_layout

\begin_layout Definition
Formulation of Control-Process
\begin_inset CommandInset label
LatexCommand label
name "def:Formulation-of-Control-Process"

\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
Of interest is a system evolving with some time-stepping scheme 
\begin_inset Formula $t\in\left\{ t_{0},t_{1},t_{2}\cdots\right\} $
\end_inset

 represented by its internal 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
state
\end_layout

\end_inset

 
\begin_inset Formula $y\in\left\{ y_{0},y_{1},y_{2}\cdots\right\} $
\end_inset

 of some state-space 
\begin_inset Formula $y_{\forall t}\in\mathcal{Y}$
\end_inset

.
\end_layout

\begin_layout Itemize
With the 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
action
\end_layout

\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
cf.
 control-input 
\begin_inset Formula $u$
\end_inset

 in control-theory
\end_layout

\end_inset

 
\begin_inset Formula $a\in\left\{ a_{0},a_{1},a_{2}\cdots\right\} $
\end_inset

 of some action-space 
\begin_inset Formula $a_{\forall t}\in\mathcal{A}$
\end_inset

 to apply to the system, the state 
\begin_inset Formula $y$
\end_inset

 evolves with its internal evolution-dynamics 
\begin_inset Formula $f$
\end_inset

.
\end_layout

\begin_layout Standard
This is seen in the following schematics:
\begin_inset Formula 
\[
\xymatrix{ &  &  & {f\left(\cdots\right)}\ar[d]_{{\text{2. evolve}}}\\
*++[o][F-]{y_{\star}}\ar[rrrr] &  &  &  & *++[o][F-]{y_{\star+1}} & \qquad\text{[System Internals]}\\
\\
 &  & *+[F-]{a_{\star}}\ar[uu]_{{\text{1. apply}}} &  &  & \qquad\text{[some Action-Source]}
}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Subsection
Application in Shetris
\end_layout

\begin_layout Standard
The game of Tetris could be readily expressed as a control-process described
 above.
 Among all possible formulations, the following is used for 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

:
\end_layout

\begin_layout Subsubsection
The state 
\begin_inset Formula $y$
\end_inset

 and time-stepping 
\begin_inset Formula $t_{k}$
\end_inset


\end_layout

\begin_layout Standard
A Tetris-game comprises of the state of the field and that of the piece.
 Thus:
\end_layout

\begin_layout Definition
State 
\begin_inset Formula $y$
\end_inset

 of the control-process of 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The state is the vectorized stacking of the field and the piece:
\begin_inset Formula 
\[
\overrightarrow{y}\coloneqq\left[\begin{alignedat}{1}y_{F}\\
y_{P}
\end{alignedat}
\right]
\]

\end_inset

where:
\end_layout

\begin_layout Itemize
the field-state 
\begin_inset Formula $y_{F}$
\end_inset

 is a two-dimensional matrix of boolean-entries;
\end_layout

\begin_layout Itemize
the piece-state 
\begin_inset Formula $y_{P}$
\end_inset

 of the piece contains three members: its piece-id 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

, its configuration in rotation and position 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
config
\end_layout

\end_inset

, as well as the coordinates of its four blocks 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
coord
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Before defining the action 
\begin_inset Formula $a$
\end_inset

 and the evolution 
\begin_inset Formula $f$
\end_inset

, the concrete time-stepping scheme must be defined.
\end_layout

\begin_layout Definition
Time-stepping of 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
For 
\begin_inset Formula $\forall k\in\mathbb{N}$
\end_inset

, the discrete time-step 
\begin_inset Formula $t_{k}$
\end_inset

 advances to 
\begin_inset Formula $t_{k+1}$
\end_inset

 with every call of
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

pids = generator.get_pids()
\end_layout

\end_inset

 to generate and retrieve the new piece-id(s) from the generator initiated
 to the specific requirement.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Thus follow the definitions of the action and the evolution in the following
 section:
\end_layout

\begin_layout Subsubsection
Action and Evolution
\end_layout

\begin_layout Definition
Action 
\begin_inset Formula $a$
\end_inset

 of Tetris-game
\end_layout

\begin_deeper
\begin_layout Standard
The action 
\begin_inset Formula $a$
\end_inset

 is defined as movements applied directly to the piece-state 
\begin_inset Formula $y_{P}$
\end_inset

, specifically, to the configuration with allowed movements to the configuration
 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
config
\end_layout

\end_inset

 and the coordinates 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
coord
\end_layout

\end_inset

:
\begin_inset Formula 
\[
a\coloneqq
\]

\end_inset

The action 
\begin_inset Formula $a$
\end_inset

 of the general Tetris-game is the three-part aggregation of action to the
 rotational, vertical and horizontal configuration.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
Evolution 
\begin_inset Formula $f$
\end_inset

 of Tetris-game
\end_layout

\begin_deeper
\begin_layout Standard
The evolution of 
\begin_inset Formula $y_{\star}$
\end_inset

 is formulated in two parts:
\end_layout

\begin_layout Itemize
Once the action 
\begin_inset Formula $a_{\star}$
\end_inset

 has been applied to the current piece 
\begin_inset Formula $a_{\star}\rightarrow y_{\star}^{P}$
\end_inset

, it is then moved vertically downwards until maxing out to form the intermediat
e piece-state 
\begin_inset Formula $\widetilde{y}^{P}\coloneqq f^{\text{fall}}\rightarrow a_{\star}\rightarrow y_{\star}^{P}$
\end_inset


\end_layout

\begin_layout Itemize
the intermediate piece-state 
\begin_inset Formula $\widetilde{y}^{P}$
\end_inset

 is applied to the current field state via the freeze-operation, which checks
 for fully occupied rows and clears them if existent, producing the next
 field-state 
\begin_inset Formula $y_{\star+1}^{F}$
\end_inset


\end_layout

\begin_layout Itemize
the generator is called upon to produce 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

 of the next piece, which is then initialized to evolve to the next piece-state
 
\begin_inset Formula $y_{\star+1}^{P}$
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
In short, the following Control-Process describes the Tetris-game:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left[\begin{alignedat}{1}y_{\star+1}^{P}\\
y_{\star}^{F}\\
\cdots\cdots\\
\widetilde{y}^{P}
\end{alignedat}
\right]\coloneqq\left[\begin{alignedat}{1}f^{\text{init}}\rightarrow f^{\text{gen}}\rightarrow y_{\star}^{P}\\
f^{\text{freeze}}\rightarrow\widetilde{y}^{P}\\
f^{\text{fall}}\rightarrow a_{\star}\rightarrow y_{\star}^{P}
\end{alignedat}
\right]
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
Action 
\begin_inset Formula $a$
\end_inset

 of 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In the current version of Shetris, as seen in other implementations of Tetris
 with trained agents 
\begin_inset CommandInset citation
LatexCommand cite
key "tetris-best-ai,tetris-nuno,uvipen"
literal "false"

\end_inset

, deploys a reduced action-space:
\begin_inset Formula 
\[
a\coloneqq\left[\begin{alignedat}{1}a^{r}\\
a^{p_{0}}\\
a^{p_{1}}
\end{alignedat}
\right]\in\left[\begin{alignedat}{1}A^{r}\coloneqq4\\
A^{P_{0}}\coloneqq\varnothing\\
A^{P_{1}}\coloneqq10
\end{alignedat}
\right]
\]

\end_inset


\end_layout

\begin_layout Standard
In other words, the vertical displacement of the piece is completely governed
 by the evolution 
\begin_inset Formula $f^{\text{fall}}$
\end_inset

.
\begin_inset Note Note
status open

\begin_layout Plain Layout
Generality for 
\begin_inset Formula $A^{r}$
\end_inset

 to use 
\begin_inset Formula $4$
\end_inset

; and 
\begin_inset Formula $A^{P_{1}}$
\end_inset

 is 
\begin_inset Formula $10$
\end_inset


\end_layout

\end_inset

 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Adaptation to 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
gym
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Interface Overview
\end_layout

\begin_layout Subsubsection
Evolution-dynamics
\end_layout

\begin_layout Standard
With The following sections specify the implementation of the components
 to realize the evolution as described above.
\end_layout

\begin_layout Remark
Intricacies in observing 
\begin_inset Formula $x$
\end_inset


\begin_inset CommandInset label
LatexCommand label
name "rem:Intricacies-in-observing-x"

\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The illustration above implicitly simplifies the process of obtaining the
 observation 
\begin_inset Formula $x_{\star}$
\end_inset

.
 Full generality as studied in 
\begin_inset CommandInset citation
LatexCommand cite
key "DQN-original,Q-learning-original"
literal "false"

\end_inset

 allows dependencies with all previous 
\begin_inset Quotes xld
\end_inset

experiences
\begin_inset Quotes xrd
\end_inset

, in particular, all previous observations and actions.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Remark
Implication of previous observations
\end_layout

\begin_deeper
\begin_layout Standard
Continuing upon the Remark 
\begin_inset CommandInset ref
LatexCommand ref
reference "rem:Intricacies-in-observing-x"
plural "false"
caps "false"
noprefix "false"

\end_inset

, the reader shall note that the consideration of including past observations
 can be safely discarded for the observation as described above, as all
 the components of the observation only rely on the current state 
\begin_inset Formula $y$
\end_inset


\end_layout

\begin_layout Itemize
the field-related analysis observations after the movement
\end_layout

\begin_layout Itemize
the number of lines cleared after the action
\end_layout

\begin_layout Itemize
the next piece-id
\end_layout

\begin_layout Standard
The observation While the placement of pieces onto the field is indeed
\end_layout

\begin_layout Standard
The schematic simplification utilized above is justified for the adaptation
 of dynamics of 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Remark
Implication of evolution
\end_layout

\begin_deeper
\begin_layout Enumerate
Note that using a standard 
\begin_inset Formula $\star$
\end_inset

-bag based algorithm, both shuffled and sequential, the past observations
 of the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

 offers clues to future generations.
 As an example, with the standard 
\begin_inset Formula $7$
\end_inset

-bag shuffled generator, the knowledge of the first 
\begin_inset Formula $6$
\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

s of one bag iteration directly provides the 
\begin_inset Formula $7^{\text{th}}$
\end_inset

 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
pid
\end_layout

\end_inset

.
 
\end_layout

\begin_layout Enumerate
It should thus be pointed out that the statement of non-relevance for past
 states of the system for the determining the evolution as made in 
\begin_inset CommandInset citation
LatexCommand cite
key "tetris-rl-survey"
literal "false"

\end_inset

 is erroneous.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsection
Formulation as Markov Decision Process
\end_layout

\begin_layout Subsubsection
The state and the dynamics
\end_layout

\begin_layout Standard
Conforming to its purpose, the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
engine
\end_layout

\end_inset

 provides the entire interaction point to the underlying game-logic.
 In terms of the environment-framework of 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
gym
\end_layout

\end_inset

, the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
engine
\end_layout

\end_inset

 stands as the system itself.
 In particular:
\end_layout

\begin_layout Definition
State 
\begin_inset Formula $y_{\star}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
The state 
\begin_inset Formula $y_{\star}$
\end_inset

 can be decomposed into:
\end_layout

\begin_layout Itemize
the state of the current piece information, provided by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
piece
\end_layout

\end_inset

 and the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
generator
\end_layout

\end_inset

 modules
\end_layout

\begin_layout Itemize
the state of the field, as provided by 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
field
\end_layout

\end_inset

-module
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
With the state 
\begin_inset Formula $y$
\end_inset

 defined, one proceeds to defining the evolution-
\end_layout

\begin_layout Definition
The Evolution
\end_layout

\begin_layout Itemize
the evolution dynamics 
\begin_inset Formula $f$
\end_inset

 is provided by the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
move
\end_layout

\end_inset

-package and the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
get_pids(...)
\end_layout

\end_inset

 method of the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
generator
\end_layout

\end_inset

-module
\end_layout

\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsubsection
Action-space
\end_layout

\begin_layout Standard
The action-space in 
\begin_inset Flex Noun
status open

\begin_layout Plain Layout
Shetris
\end_layout

\end_inset

 is defined as one rotation and one (horizontal) movement.
 This conforms with existing attempts at agent-design for Tetris: 
\begin_inset CommandInset citation
LatexCommand cite
key "tetris-best-ai,tetris-nuno,uvipen"
literal "false"

\end_inset

.
 In essence, this is provided with
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

// enter source code
\end_layout

\begin_layout Plain Layout

gym.space.Spaces.
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
f
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Subsection
Extra Implementations
\end_layout

\begin_layout Definition
Visualization: Graphical or Terminal UI
\end_layout

\begin_deeper
\begin_layout Enumerate
Straight-forward: State 
\begin_inset Formula $S$
\end_inset

 to a UI-representation,
\end_layout

\begin_layout Enumerate
Probably more difficult: UI-representation to State 
\begin_inset Formula $S$
\end_inset

, which would be useful for 
\begin_inset Quotes xld
\end_inset

scanning in
\begin_inset Quotes xrd
\end_inset

 external video-recordings of game-plays,
\end_layout

\begin_layout Enumerate
Nice-to-have: allow pane-by-pane display of the same sequence of Tetris-pieces:
\end_layout

\begin_deeper
\begin_layout Enumerate
one for interactive human game-play,
\end_layout

\begin_layout Enumerate
one for showcasing the machine-solution.
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
Multiple flavors of Tetirs
\end_layout

\begin_deeper
\begin_layout Standard
A wide range of variants of Tetris
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://tetris.wiki/List_of_official_Tetris_games
\end_layout

\end_inset


\end_layout

\end_inset

 exist, each with its own idiosyncrasies.
 By defining new implementations for 
\begin_inset Formula $\mathbf{R}\coloneqq\mathbf{R}_{\text{clr}}\circ\mathbf{R}_{y}$
\end_inset

, not only can such spin-offs be represented, but also the already-mentioned
 advanced maneuvers such as 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
T
\end_layout

\end_inset

-spins.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Starting the game
\end_layout

\begin_layout Definition
moves
\end_layout

\begin_deeper
\begin_layout Enumerate
Moves is a sequence of atomic-moves
\end_layout

\begin_deeper
\begin_layout Enumerate
Horizontal
\end_layout

\begin_layout Enumerate
Vertical
\end_layout

\begin_layout Enumerate
Rotation
\end_layout

\begin_layout Standard
i.e., to execute a 
\begin_inset Quotes xld
\end_inset

moves
\begin_inset Quotes xrd
\end_inset

, we execute each all he atomic-moves, one by one
\end_layout

\end_deeper
\begin_layout Enumerate
How an atomic-move is executed
\end_layout

\begin_deeper
\begin_layout Enumerate
generate tentative-position
\end_layout

\begin_layout Enumerate
check collision
\end_layout

\begin_deeper
\begin_layout Enumerate
if collided:
\end_layout

\begin_deeper
\begin_layout Enumerate
if this move is a rotation
\end_layout

\end_deeper
\begin_layout Enumerate
if not collided: move-success
\end_layout

\end_deeper
\begin_layout Enumerate
if move-success: use the tentative position
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
Moves, one-shot
\end_layout

\begin_deeper
\begin_layout Enumerate
This is the way the computer plays it
\end_layout

\begin_layout Enumerate
the moves is given as a big-lump:
\end_layout

\begin_deeper
\begin_layout Enumerate
e.g., the move is 
\begin_inset Formula $\left(4,3,1\right)$
\end_inset

; which means to move down by 
\begin_inset Formula $4$
\end_inset

, right by 
\begin_inset Formula $3$
\end_inset

 and rotate by 
\begin_inset Formula $1$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Two major differences exist
\end_layout

\begin_deeper
\begin_layout Enumerate
The order among all atomic-moves is lost: we could never reconstruct a sequence
 of atomic-moves from a one-shot; however, we can very well compress a sequence
 of atomic-moves into a one-shot
\end_layout

\begin_layout Enumerate
due to this, a one-shot fails as a unit: since we cannot know the order
 of the sequence, we cannot know how 
\begin_inset Quotes xld
\end_inset

far
\begin_inset Quotes xrd
\end_inset

 along a hypothetical sequence of moves one is before the move fail happens;
 thus, we cannot accept a part of a one-shot; thus, a one-shot fails as
 a whole
\end_layout

\end_deeper
\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Section
Modeling the Game
\end_layout

\begin_layout Subsection
Control theory
\end_layout

\begin_layout Subsubsection
overview
\end_layout

\begin_layout Definition
Defining the Tetris-game
\end_layout

\begin_deeper
\begin_layout Enumerate
The control-input 
\begin_inset Formula $u\coloneqq$
\end_inset

 moves;
\end_layout

\begin_layout Enumerate
The system-dynamics 
\begin_inset Formula $f\coloneqq$
\end_inset

 collision engine.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
In the following, these components are explained in detail.
\end_layout

\begin_layout Subsubsection
State 
\begin_inset Formula $x$
\end_inset


\end_layout

\begin_layout Claim
Several obvious properties
\end_layout

\begin_deeper
\begin_layout Enumerate
The system-state 
\begin_inset Formula $x$
\end_inset

 is fully observable
\end_layout

\begin_layout Enumerate
\begin_inset Note Note
status open

\begin_layout Plain Layout
what matrix pair 
\begin_inset Formula $\left(A,?\right)$
\end_inset

?
\end_layout

\end_inset

 The system if fully controllable
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
Representation of the (visible) play-field of Tetris
\end_layout

\begin_deeper
\begin_layout Standard
The entire 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
field
\end_layout

\end_inset

 of a Tetris-game, typically composed of 
\begin_inset Formula $20\times10$
\end_inset

 (height and width respectively) 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
squares
\end_layout

\end_inset

, could be expressed as a boolean state-matrix 
\begin_inset Formula $S$
\end_inset

 of equal size, where each of its 
\begin_inset Formula $200$
\end_inset

 entries is intuitively defined as: 
\begin_inset Formula 
\[
S_{\forall i,\forall j}\coloneqq\begin{cases}
0\left(\mathtt{FALSE}\right) & \text{, if square is not occupied by any Tetris-piece}\\
1\left(\mathtt{TRUE}\right) & \text{, otherwise}
\end{cases}
\]

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Several immediate justifications for this representation are:
\end_layout

\begin_layout Enumerate
Apparent connection to linear algebra,
\end_layout

\begin_layout Enumerate
Applicability of sparse linear-operations, since a mature game-play shall
 have mostly 
\begin_inset Formula $0$
\end_inset

-entries under the above representation,
\end_layout

\begin_layout Enumerate
Easy-to-navigate space of boolean-values.
\end_layout

\begin_layout Subsubsection
Control-Inputs 
\begin_inset Formula $u$
\end_inset


\end_layout

\begin_layout Note
Player's influence
\end_layout

\begin_deeper
\begin_layout Standard
At any time-point 
\begin_inset Formula $n$
\end_inset

, 
\begin_inset Formula $\mathbf{Q_{n}}$
\end_inset

 is the only 
\begin_inset Quotes xld
\end_inset

input
\begin_inset Quotes xrd
\end_inset

 available to the player.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Definition
A 
\begin_inset Quotes xld
\end_inset

move
\begin_inset Quotes xrd
\end_inset


\end_layout

\begin_deeper
\begin_layout Standard
In analogy to the chess game, a 
\begin_inset Quotes xld
\end_inset

move
\begin_inset Quotes xrd
\end_inset

 could be is defined as the composition 
\begin_inset Formula $\mathbf{Q}\circ\mathbf{P}$
\end_inset

.
 As an example, 
\begin_inset Formula $T_{2,+90^{\circ}}$
\end_inset

 denotes a 
\begin_inset Formula $\mathbf{P}_{n}=T\text{-piece}$
\end_inset

 horizontally shifted by 
\begin_inset Formula $\mathbf{Q}_{x,n}=2$
\end_inset

 and rotated by 
\begin_inset Formula $\mathbf{Q}_{\text{rot},n}\coloneqq90^{\circ}.$
\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsubsection
System-Dynamics 
\begin_inset Formula $f$
\end_inset


\end_layout

\begin_layout Standard
Thus, after the 
\begin_inset Formula $n^{\text{th}}$
\end_inset

 Tetris-piece has been placed, a corresponding matrix 
\begin_inset Formula $S_{n}$
\end_inset

 can be directly generated to represent the state of the field.
 This apparently discrete model prompts the following definition of an entire
 Tetris-game.
\end_layout

\begin_layout Definition
Tetris as discrete-evolution
\end_layout

\begin_deeper
\begin_layout Standard
A Tetris-game can be readily modeled as a discrete evolution-problem:
\begin_inset Formula 
\[
S_{n+1}\coloneqq\left(\mathbf{O}_{n+1}\right)\rightarrow S_{n}
\]

\end_inset

where the Operator 
\begin_inset Formula $\mathbf{O}_{n+1}$
\end_inset

 denotes the evolution-mechanism, a composition of multiple sub-level operators:
\begin_inset Formula 
\[
\mathbf{O}_{n+1}\coloneqq\mathbf{R}_{n}\circ\mathbf{Q}_{n+1}\circ\mathbf{P}_{n+1}
\]

\end_inset

Note that the order of composition follows from right to left, similar to
 matrix-matrix multiplication.
 These sub-level operators are defined next.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsubsection
Components of the Evolution 
\begin_inset Formula $\mathbf{O}_{n}$
\end_inset


\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathbf{P}_{n}\coloneqq$
\end_inset

 piece-operator, i.e., evaluates to one of the 
\begin_inset Formula $7$
\end_inset

 pieces seen in Appendix-1, where rotation-symmetric counter-parts are counted
 as a new piece, which is the case for the 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
L
\end_layout

\end_inset

-piece and 
\begin_inset Flex Code
status open

\begin_layout Plain Layout
z
\end_layout

\end_inset

-pieces;
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathbf{Q}_{n}\coloneqq$
\end_inset

 control-operator denoting player's input, a composition of:
\begin_inset Formula 
\[
\mathbf{Q}_{n}\coloneqq\mathbf{Q}_{x,n}\circ\mathbf{Q}_{\text{rot},n}
\]

\end_inset

where:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathbf{Q}_{x,n}\coloneqq$
\end_inset

 horizontal-shift-operator (at most 
\begin_inset Formula $10$
\end_inset

 distinct values),
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathbf{Q}_{\text{rot},n}\coloneqq$
\end_inset

 rotation-operator (at most 
\begin_inset Formula $4$
\end_inset

 distinct values);
\end_layout

\end_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathbf{R}_{n}\coloneqq$
\end_inset

 rule-operator, a composition of:
\begin_inset Formula 
\[
\mathbf{R}_{n}\coloneqq\mathbf{R}_{\text{clr}}\circ\mathbf{R}_{y,n}
\]

\end_inset

where:
\end_layout

\begin_deeper
\begin_layout Enumerate
\begin_inset Formula $\mathbf{R}_{\text{clr}}\coloneqq$
\end_inset

 line-clear-operator (constant for all evolution-step, thus no time-index
 
\begin_inset Formula $n$
\end_inset

): whenever sum of a line is 
\begin_inset Formula $10$
\end_inset

, i.e., every square has 
\begin_inset Formula $1$
\end_inset

 indicating its occupancy, its entries are reset to all 
\begin_inset Formula $0$
\end_inset

.
 In essence, the 
\begin_inset Formula $\mod10$
\end_inset

 operation is performed,
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathbf{R}_{y,n}\coloneqq$
\end_inset

 vertical-placement-operator, i.e., outputs which vertical height a piece
 
\begin_inset Formula $\mathbf{P}$
\end_inset

 in its configuration given by the control-input 
\begin_inset Formula $\mathbf{Q}$
\end_inset

 will end up 
\begin_inset Quotes xld
\end_inset

fallen down to
\begin_inset Quotes xrd
\end_inset

 in the current play-field 
\begin_inset Formula $S_{n}$
\end_inset

.
 Disregarding more involved player-inputs such as tucks and spins, it can
 be intuitively understood as the representation of the maximal height of
 an occupied square of all columns.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Subsubsection
Summary
\end_layout

\begin_layout Definition
One game of Tetris
\end_layout

\begin_deeper
\begin_layout Standard
The discrete-evolution of a Tetris-game is captured with:
\begin_inset Formula 
\[
\begin{alignedat}{1}S_{n+1}\coloneqq & \left(\mathbf{O}_{n+1}\right)\rightarrow S_{n}\\
\coloneqq & \left(\mathbf{R}_{n}\circ\mathbf{Q}_{n+1}\circ\mathbf{P}_{n+1}\right)\rightarrow S_{n}
\end{alignedat}
\]

\end_inset

in other words, the next state of the game-field 
\begin_inset Formula $S_{n+1}$
\end_inset

 is found as the current state 
\begin_inset Formula $S_{n}$
\end_inset

 evolved with 
\begin_inset Formula $\mathbf{O}_{n+1}$
\end_inset

, which translates to the chaining of three operators: the Tetris-piece
 
\begin_inset Formula $\mathbf{P}_{n+1}$
\end_inset

, followed by the user's control-input 
\begin_inset Formula $\mathbf{Q}_{n+1}$
\end_inset

 and finalized by the rule 
\begin_inset Formula $\mathbf{R}_{n}$
\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Note
Intricacy on time-index
\end_layout

\begin_deeper
\begin_layout Standard
The uneven indexing of 
\begin_inset Formula $n$
\end_inset

 in 
\begin_inset Formula $\mathbf{R}_{n}$
\end_inset

 versus that of 
\begin_inset Formula $n+1$
\end_inset

 in 
\begin_inset Formula $\mathbf{Q}_{n+1}$
\end_inset

 and 
\begin_inset Formula $\mathbf{P}_{n+1}$
\end_inset

 is by design: One shall consciously observe that:
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathbf{R}_{n}$
\end_inset

, notably its component 
\begin_inset Formula $\mathbf{R}_{y,n}$
\end_inset

 that colloquially determines the vertical 
\begin_inset Quotes xld
\end_inset

landscape
\begin_inset Quotes xrd
\end_inset

, is completely determined with 
\begin_inset Formula $S_{n}$
\end_inset

, i.e., known at current step 
\begin_inset Formula $n$
\end_inset

;
\end_layout

\begin_layout Enumerate
\begin_inset Formula $\mathbf{Q}_{n+1}$
\end_inset

 and 
\begin_inset Formula $\mathbf{P}_{n+1}$
\end_inset

 is known only 
\begin_inset Flex Emph
status open

\begin_layout Plain Layout
after
\end_layout

\end_inset

 the new piece 
\begin_inset Formula $\mathbf{P}_{n+1}$
\end_inset

 becomes available, thus requires information at the 
\begin_inset Quotes xld
\end_inset

next
\begin_inset Quotes xrd
\end_inset

 step.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\end_body
\end_document
